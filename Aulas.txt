//Aula 283
//Passando um objeto Department para formulário DepartmentForm.
//O motivo é porque este formulário vai servir tanto para a gente inserir
//um novo Departamento no Banco de Daods quanto pra atualizar um Departamento
//existente.
// Vamos criar uma dependência para um Departamento com o metodo set.
// Vamos criar um método para atualizar os dados do formulario com base neste objeto Department

// No DepartmentListController atualizar o método onBtNewAction e createDialogForm

// Em onBtNewAction como é um botão para cadastrar um novo Departament, o formulario
// começará vazio.
// Entao preciso instanciar um departamento vazio ( Department obj = new Department(); )
// Agora preciso injetar este obj no controlador do formulário.
// Pra isso foi colocado um parametro a mais em createDialogForm ( obj )

//Aula 284

// Na classe Utils , implementar o método tryParseToInt para ajudar a converter o valor da // caixinha pra inteiro

// Na classe DepartmentService, criar o método saveOrUpdate que vai ser um método para 
// inserir um Departamente no banco ou atualizar um existente

// Na calsse DepartmentFormController , criar uma dependência com o DepartmentService com // método set
// Implementar a ação de onBtSaveAction e onBtCancelAction.

// Na Classe DepartmentListController, injetar a dependência de DepartmentService

//Aula 285

// criar uma interface DataChangeListener

// A classe DepartmentFormController sera subject, ou seja a classe que vai emitir o // evento.
// A classe DepartmentFormController terá uma lista ( List<DataChangeListener> ) que irá // guardar os objetos interessados em receber o evento. Para que esses objetos possam se // inscrever para receber a lista, preciso disponibilizar um metodo // subscribeDataChangeListener()

// No DepartmentListController implementar a interface DataChangeListener

//Aula 286
// Vamos implementar uma validação de dados e assim criar uma exceção personalizada de
// validação.
// Criar a classe ValidationException

// Na classe DepartmentFormController, implementar algumas verificações e lançar a // validation exception se for o caso.
// Implementar o método setErrorMessages.
// No método onBtSaveAction dar um catch no Validation Exception 

//Aula 287
// Fazer a operação de atualização de departamento.
// Criar um novo atributo tableColumnEDIT na clase DepartmentListController
// Criar um método initEditButtons que vai criar um botão de edição em cada linha da tabela
// (É um código específico tirado do stackoverflow)

//Aula 288 
// Remover um departamento. Vamos fazer a mesma abordagem da Operação de Atualização.
// Vamos acrescentar um botãozinho na tabela.
// Antes de apagar vamos mostrar um alert. Logo, na classe Alert vamos criar um método // chamado showConfirmation()

// Na classe DepartmentService criar um método para Remover um Departamento.

// Na classe DepartmentListController criar um novo atributo tableColumnREMOVE
// Criar um método initRemoveButtons

//Aula 290
// Vamos começar a fazer o CRUD de vendedores, nesta aula fazer a tela que vai listar os 
// vendedores.
// Clonar DepartmentService para SellerService, depois os SellerListController (comentar o // método createDialogForm) e SellerList.fxml

// No MainViewController , atualizar o método onMenuItemSellerAction() para abrir a tela
// Seller

//Aula 291
// Acrescentar dois métodos de formatação de Data numa listagem de objetos na classe Utils

// Na classe SellerListController, acresentar os atributos email, birthDate, baseSalary
// Atualizar o método initializeNodes() pois temos que dar instruções para inicializar os // atributos novos
// No SellerListView acrescentar os tablescolumns dos atributos novos e associa-los.

//Aula 292
// Fazer o SellerForm.
// Clonar SellerFormController, SellerForm e descomentar o createDialogForm de // SellerListController

//Aula 293
// Contrução do Formulário. Vamos acrescentar os TextFields para entrar com os dados // assim como acrescentar o DatePicker para pegar a Data (código pego no // statckoverflow)
// Incluir os atributos TextField e DatePicker (email, birthDate, baseSalary)
// Criar um novo Label de Erro para cada um dos atributos novos
// Editar o SellerFormView, criar os Labels para erro, textfields para os campos e o 
// DatePicker para a data a associa-los aos seus ids

// Na Classe SellerDaoJDBC , no método instatiateSeller, alterar o obj.setBIrthDate

// Na classe SellerFormController, atualizar o método initializeNodes()
// Atualizar o updateFormData()

//Aula 294
// ComboBox para escolher o departamento (Lista para escolher o departamento do // vendedor)
// Na classe SellerFormController colocar uma dependência para DepartmentService
// Atualizar o método setServices (método renomeado)

// Criar atributo do tipo ComboBox
// Criar a ObservableList
// Criar método loadAssociatedObjects que vai ser responsável por chamar o 
// DepartmentService e carregar os departamentos do banco de dados e preenchendo a  
// lista com estes departamentos

// Chamar o método loadAssociatedObjects() na hora de criar o formulário dentro de 
// createDialogForm da classe SellerListController

// Criar método para inicializar o ComboBox
// Colocar o comboBox na SellerForm

//Aula 295
// Salvar no Banco de dados inserindo ou atualiando um vendendo existente.
// Atualizar o método getFormData() da classe SellerFormController
// Atualizar o método setErrorMessages